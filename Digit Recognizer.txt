DIGIT RECOGNIZER - RUTUJA A PADALKAR               

import tensorflow as tf
from matplotlib import pyplot as plt
import numpy as np

objects = tf.keras.datasets.mnist
(training_images, training_lables), (test_images, test_labels) = objects.load_data()

for i in range(9):
  plt.subplot(330 + 1 + i)
  plt.imshow(training_images[i])

print(training_images.shape)
print(training_images[0])

training_images = training_images / 255.0
test_images = test_images / 255.0

model = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape=(28,28)),
                                    tf.keras.layers.Dense(128, activation='relu'),
                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)])


model.compile(optimizer = tf.optimizers.Adam(),
              loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy']) 

model.fit(training_images, training_lables, epochs=5)

print(model.evaluate(test_images, test_labels))

plt.imshow(test_images[1])

prediction = model.predict(test_images)
print(np.argmax(prediction[1]))

model.save("DigitRecognizer.hdf5")

from tensorflow import keras

model_new = keras.models.load_model('DigitRecognizer.hdf5')

print(np.argmax(prediction[8]))

CREATING WEB APP USING STREAMLIT

!pip install streamlit --quiet
!pip install pyngrok==4.1.1 --quiet
!pip install streamlit-drawable-canvas --quiet
from pyngrok import ngrok

%%writefile app.py
import streamlit as st
import cv2
import numpy as np
from streamlit_drawable_canvas import st_canvas
from tensorflow import keras
model_new = keras.models.load_model('DigitRecognizer.hdf5')
st.title("Digit Recognizer")


# Create a canvas component
canvas_result = st_canvas(
    fill_color="#000000",  # Fixed fill color with some opacity
    stroke_width=10,
    stroke_color='#ffffff',
    background_color="#000000",
    height=200,width=200,
    drawing_mode='freedraw',
    key="canvas",
)

if canvas_result.image_data is not None:
    img = cv2.resize(canvas_result.image_data.astype('uint8'), (28, 28))
    rescaled = cv2.resize(img, (200, 200), interpolation=cv2.INTER_NEAREST)
    st.image(rescaled)


if st.button('Predict'):
    test_x = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    val = model_new.predict(test_x.reshape(1, 28, 28))
    st.write(f'result: {np.argmax(val[0])}')
    st.bar_chart(val[0])


!nohup streamlit run app.py &
url = ngrok.connect(port='8501')
print(url)

